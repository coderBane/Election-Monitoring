@page "/candidates/{CandidateId}"

@using Election2023.Application.Features.Candidates.Queries
@inject ISender Mediator
@inject IJSRuntime JS

<PageTitle>Candidtate</PageTitle>

<div class="container">
    <nav class="header-links" aria-label="breadcrumb">
        <ol class="breadcrumb text-center">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="/presidential-candidates">Presidential Candidates</a></li>
            <li class="breadcrumb-item active" aria-current="page">
                @(candidateProfileVM?.DisplayName ?? "Candidate")
            </li>
        </ol>
    </nav>
    @if(candidateProfileVM is not null)
    {
        <div class="row">
            <div class="col-md-6">
                @if(candidateProfileVM.Incumbent){
                    <h3>@(candidateProfileVM.DisplayName+" (Incumbent)")</h3>
                }
                else{
                    <h3>@candidateProfileVM.DisplayName</h3>
                }
                <br/>
                <div class="d-flex justify-content-between" style="width: 100%; height:100px">
                    <h5>Party: @string.Format("{0} ({1})", candidateProfileVM.PartyName, candidateProfileVM.Party)</h5>
                    <img src="@candidateProfileVM.PartyLogo" style="max-width: 100%; max-height: 100%;"/>
                </div>
                <br>
                <h5>Education: @candidateProfileVM.Education</h5>
                <br/>
                <h6>Age: @candidateProfileVM.Age</h6>
                <br>
                <hr size="6" width="10%" color="SlateGray" class="my-3">
                @if(!string.IsNullOrEmpty(@candidateProfileVM.Brief))
                {
                    @foreach (string papragraph in candidateProfileVM.Brief.Split(Environment.NewLine))
                    {
                        <p style="text-align: justify;">@papragraph</p>
                    }
                }
                else
                {
                    <p>
                        There is no biography on this cadidate at this time. If you are a representative of this candidate please 
                        contact the Team at ouremail.com with the appropriate information, and we will update this profile.
                    </p>
                }
            </div>
            <div class="col-md-6">
                <img src="@candidateProfileVM.Image" alt="@candidateProfileVM.DisplayName" 
                    style="max-width: 100%; max-height: 100%;">
            </div>
        </div>
        @if(hasSpeaks)
        {
            <hr size="6" width="100%" color="SlateGray" class="my-5"/>
            <section>
                <h3 style="text-align: center;">Candidate Speaks</h3>
                <div id="candidate-speaks">
                    @foreach(var quote in candidateProfileVM.Manifesto)
                    {
                        <article>
                            <h5><span class="oi oi-double-quote-sans-left"></span></h5>
                            <p style="text-align: justify;">@quote</p>
                        </article>
                    }
                </div>
            </section>
        }
        <section>
            <hr size="6" width="100%" color="SlateGray" class="my-5"/>
            <div class="container">
                <h3 style="text-align: center;">Promises</h3>
            </div>
        </section>
    }
</div>

@code{

    [Parameter]
    public string candidateId { get; set; } = string.Empty;

    private CandidateProfileVM? candidateProfileVM;

    private bool hasSpeaks;

    private bool loading;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(candidateId))
        {
            await LoadCandidateProfileAsync();
        }
        await base.OnParametersSetAsync();
    }
    
    @* protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && hasSpeaks)
        {
            await JS.InvokeVoidAsync("sliderFunctions.candidateSpeaks");
        }
    } *@

    private async Task LoadCandidateProfileAsync()
    {
        if (loading) return;

        loading = true;

        var candidate =  await Mediator.Send(new GetCandidatesByIdQuery(){ Id = candidateId, Include = true });
        if (candidate.Success)
        {
            if (candidate is not null)
            {
                candidateProfileVM = candidate.Data;
                hasSpeaks = candidateProfileVM!.Manifesto.Any();
            }
        }

        loading = false;
    }
}